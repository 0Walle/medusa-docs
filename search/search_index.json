{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Medusa Documentation Introduction Medusa is a language made for pure fun. This is a small documentation for its test versions. Weird things might happen. Getting Started Hello, World! As always: fn main(){ println( Hello, World! ); } Compiling and running this program should print Hello, World! , if it doesn't, then something is really wrong. Now what? Now lets understand what's going on here. Every Medusa program starts with a main function. Like this: fn main(){ } Then inside the function there is the line: println( Hello, World! ); This line calls the function println with the argument \"Hello, World!\" which is a string and prints it in the console. Tutorial The Tutorial will show the features of the language in a understandable order.","title":"Medusa Documentation"},{"location":"#medusa-documentation","text":"","title":"Medusa Documentation"},{"location":"#introduction","text":"Medusa is a language made for pure fun. This is a small documentation for its test versions. Weird things might happen.","title":"Introduction"},{"location":"#getting-started","text":"","title":"Getting Started"},{"location":"#hello-world","text":"As always: fn main(){ println( Hello, World! ); } Compiling and running this program should print Hello, World! , if it doesn't, then something is really wrong.","title":"Hello, World!"},{"location":"#now-what","text":"Now lets understand what's going on here. Every Medusa program starts with a main function. Like this: fn main(){ } Then inside the function there is the line: println( Hello, World! ); This line calls the function println with the argument \"Hello, World!\" which is a string and prints it in the console.","title":"Now what?"},{"location":"#tutorial","text":"The Tutorial will show the features of the language in a understandable order.","title":"Tutorial"},{"location":"quick_ref/","text":"Medusa Quick Reference This is for already programers that want to know how to use this language. Program The program starts in a main function with no arguments and no return type. fn main(){ } Functions Functions are declared in the form: fn function_name(arg0 #type, ..., argn #type)#return_type { } Functions with no return value don't have the #return_type part. Types The basic types are int , float , bool and str . Arrays have are declared with two square brakets, like int[] Function types are written in the form fn#R (A0,A1,...,An) . With R being the return type and A0 to An the parameter types. Ranges are iterables made by an int start value and an int end value. Variables Variables are declared with let and constants with const , variables with initialized value can be type infered. fn main(){ let number = 34; let name #str = Alice ; let done #bool; const PI = 3.14; } Operations Mathematic operators + , - , * and / can be used by every numeric type. % , ++ and -- can only be used with int . Plus + is also used to concatenate strings. Bitwise operators ~ , | , ^ , , and can be used with int Equality operators == and != can be used with any type Comparision operators , , = and = can be used with numeric types. Logical operators ! , and || convert any type used by then to bool automatically. Range operator .. is used to form Range types with two int s Conversion operator # is used to convert a value to a basic type. Assign operator is = and can be augmented with *= , /= , %= , -= , += , = , |= and ^= . Control flow If statements will convert a expression to bool automatically. While and do while statements also convert to bool There are two types of for loop: The C like version: // C like for example for(let i = 0; i 10; i++){ } and the for with iterable or for in : // for in example for(i: 0..5){ } in the example i is declared with the for and is available only inside it. Iterables Iterables have two methods called next and hasNext that are used mainly by the for in loop. Ranges are an iterable type. Arrays and str have an iter method that returns an iterable to them.","title":"Medusa Quick Reference"},{"location":"quick_ref/#medusa-quick-reference","text":"This is for already programers that want to know how to use this language.","title":"Medusa Quick Reference"},{"location":"quick_ref/#program","text":"The program starts in a main function with no arguments and no return type. fn main(){ }","title":"Program"},{"location":"quick_ref/#functions","text":"Functions are declared in the form: fn function_name(arg0 #type, ..., argn #type)#return_type { } Functions with no return value don't have the #return_type part.","title":"Functions"},{"location":"quick_ref/#types","text":"The basic types are int , float , bool and str . Arrays have are declared with two square brakets, like int[] Function types are written in the form fn#R (A0,A1,...,An) . With R being the return type and A0 to An the parameter types. Ranges are iterables made by an int start value and an int end value.","title":"Types"},{"location":"quick_ref/#variables","text":"Variables are declared with let and constants with const , variables with initialized value can be type infered. fn main(){ let number = 34; let name #str = Alice ; let done #bool; const PI = 3.14; }","title":"Variables"},{"location":"quick_ref/#operations","text":"Mathematic operators + , - , * and / can be used by every numeric type. % , ++ and -- can only be used with int . Plus + is also used to concatenate strings. Bitwise operators ~ , | , ^ , , and can be used with int Equality operators == and != can be used with any type Comparision operators , , = and = can be used with numeric types. Logical operators ! , and || convert any type used by then to bool automatically. Range operator .. is used to form Range types with two int s Conversion operator # is used to convert a value to a basic type. Assign operator is = and can be augmented with *= , /= , %= , -= , += , = , |= and ^= .","title":"Operations"},{"location":"quick_ref/#control-flow","text":"If statements will convert a expression to bool automatically. While and do while statements also convert to bool There are two types of for loop: The C like version: // C like for example for(let i = 0; i 10; i++){ } and the for with iterable or for in : // for in example for(i: 0..5){ } in the example i is declared with the for and is available only inside it.","title":"Control flow"},{"location":"quick_ref/#iterables","text":"Iterables have two methods called next and hasNext that are used mainly by the for in loop. Ranges are an iterable type. Arrays and str have an iter method that returns an iterable to them.","title":"Iterables"},{"location":"tutorial/","text":"Medusa Tutorial Basic Types and Operators Medusa is a staticly typed language, that means that things have a single known type in the entire program. Numeric Types Medusa currently has two numeric types: int and float . The int type represents signed integer numbers from \u221232767 to +32767. Integer literals can be written in decimal form like 2573 . The float type represents floating-point numbers. Float literals are written like 45.67 . Numeric types can do numeric operations, they are: 56 + 21; // addition 310 - 65; // subtraction 8 * 32; // multiplication 44 / 2; // division 8 % 2; // remainder (or modulo) int type can do bitwise operations, they aren't common but they can be very util sometimes: ~65; // not 5 4; // and 16 | 2; // or 75 ^ 32; // xor The str type str represents strings in Medusa. String literal are written with double quotes like \"I'm a string\" . If you need to write a \" inside the string you need to escape it with \\ , for example: // The next line will print `I'm a escaped string` println( I'm a \\ escaped\\ string ); Indexing is done with [ ] , it will take a character in the string in the position inside the brackets: // The next expression will result in the `s` char, the third letter. A sample string [2]; If its the 3rd why there is a 2 there? Cause indexes start with 0 in programming world, with a few exceptions. str type can do concatenation with the + operator: println( + operator can join + two strings ); The bool type A bool can only have two values: true or false , they are mainly used in conditional expressions for control flow which will be shown later. Comparision and equality operators result in a bool . Equality operators == and != can be used with every type. 5 == 5; // equals // this expression result in true tomatoes != potatoes ; // not equals // this expression result in true, because the strings aren't equal Comparision operators , , = and = can be used with numeric types, since both sides of the expression have the same type. 3 5; // less than // results in true 3 = 5; // greater than or equal // results in false 2.4 6; // compilation error, a float can't be compared to an int without conversion. Converting types To fix the previous error a conversion must be made, conversions are made with the # operator followed by a basic type to convert to. 2.4 6#float; // compiles sucessfuly, results in false Only numeric types can be converted to other numeric type, but any type can be converted to a str or a bool . // That line will print `Is 5 greater than 0? true` println( Is 5 greater than 0? + (5 0)#str); // The parentheses are used to group the entire expression // to be converted to a string, like the ones in math. Variables Variables are used to store values. Variables are declared with the let keyword. let number = 5; // `number` now stores the int 5 // all variables have a type too, it can be written using # // but type inference makes it optional let name #str = Alice ; // unless the variable is uninitialized let done #bool; Constants are like variables but they can't change. They are declared with const and their type must be written. const size #int = 16;","title":"Medusa Tutorial"},{"location":"tutorial/#medusa-tutorial","text":"","title":"Medusa Tutorial"},{"location":"tutorial/#basic-types-and-operators","text":"Medusa is a staticly typed language, that means that things have a single known type in the entire program.","title":"Basic Types and Operators"},{"location":"tutorial/#numeric-types","text":"Medusa currently has two numeric types: int and float . The int type represents signed integer numbers from \u221232767 to +32767. Integer literals can be written in decimal form like 2573 . The float type represents floating-point numbers. Float literals are written like 45.67 . Numeric types can do numeric operations, they are: 56 + 21; // addition 310 - 65; // subtraction 8 * 32; // multiplication 44 / 2; // division 8 % 2; // remainder (or modulo) int type can do bitwise operations, they aren't common but they can be very util sometimes: ~65; // not 5 4; // and 16 | 2; // or 75 ^ 32; // xor","title":"Numeric Types"},{"location":"tutorial/#the-str-type","text":"str represents strings in Medusa. String literal are written with double quotes like \"I'm a string\" . If you need to write a \" inside the string you need to escape it with \\ , for example: // The next line will print `I'm a escaped string` println( I'm a \\ escaped\\ string ); Indexing is done with [ ] , it will take a character in the string in the position inside the brackets: // The next expression will result in the `s` char, the third letter. A sample string [2]; If its the 3rd why there is a 2 there? Cause indexes start with 0 in programming world, with a few exceptions. str type can do concatenation with the + operator: println( + operator can join + two strings );","title":"The str type"},{"location":"tutorial/#the-bool-type","text":"A bool can only have two values: true or false , they are mainly used in conditional expressions for control flow which will be shown later. Comparision and equality operators result in a bool . Equality operators == and != can be used with every type. 5 == 5; // equals // this expression result in true tomatoes != potatoes ; // not equals // this expression result in true, because the strings aren't equal Comparision operators , , = and = can be used with numeric types, since both sides of the expression have the same type. 3 5; // less than // results in true 3 = 5; // greater than or equal // results in false 2.4 6; // compilation error, a float can't be compared to an int without conversion.","title":"The bool type"},{"location":"tutorial/#converting-types","text":"To fix the previous error a conversion must be made, conversions are made with the # operator followed by a basic type to convert to. 2.4 6#float; // compiles sucessfuly, results in false Only numeric types can be converted to other numeric type, but any type can be converted to a str or a bool . // That line will print `Is 5 greater than 0? true` println( Is 5 greater than 0? + (5 0)#str); // The parentheses are used to group the entire expression // to be converted to a string, like the ones in math.","title":"Converting types"},{"location":"tutorial/#variables","text":"Variables are used to store values. Variables are declared with the let keyword. let number = 5; // `number` now stores the int 5 // all variables have a type too, it can be written using # // but type inference makes it optional let name #str = Alice ; // unless the variable is uninitialized let done #bool; Constants are like variables but they can't change. They are declared with const and their type must be written. const size #int = 16;","title":"Variables"}]}